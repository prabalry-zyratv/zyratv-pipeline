name: Build & Upload Videos

on:
  workflow_dispatch: {}
  push:
    paths:
      - "input/scripts/**"
      - "main.py"
      - "video.py"
      - "tts.py"
      - "requirements.txt"
      - ".github/workflows/pipeline.yml"

concurrency:
  group: zyratv-pipeline-${{ github.ref }}
  cancel-in-progress: true

jobs:
  render:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      # Rendering controls (tweak for speed/quality)
      VIDEOS_LIMIT: "1"                 # test one video
      SEGMENTS: "2"                     # fewer Pexels calls during tests
      BURN_IN_CAPTIONS: "0"             # off for now (Linux-only if enabled)
      X264_PRESET: veryfast             # ultrafast/veryfast/fast/medium...
      X264_CRF: "23"                    # lower = higher quality, bigger file

      # Secrets
      PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
      GOOGLE_DRIVE_INPUT_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_INPUT_FOLDER_ID }}
      GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
      GOOGLE_DRIVE_CREDENTIALS: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}

      # Logging & tooling
      PYTHONUNBUFFERED: "1"
      PYTHONFAULTHANDLER: "1"
      IMAGEIO_FFMPEG_EXE: /usr/bin/ffmpeg

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      - name: Install system deps (ffmpeg + fonts)
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg fonts-dejavu-core

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Drive libs for fetching + uploading
          pip install google-api-python-client google-auth google-auth-httplib2 google-auth-oauthlib

      - name: Show tool versions
        run: |
          python - << 'PY'
          import sys, subprocess
          print("Python:", sys.version)
          try:
              import moviepy, PIL, numpy, imageio, requests, yaml
              from PIL import Image
              print("moviepy:", moviepy.__version__)
              print("Pillow:", PIL.__version__, "ANTIALIAS:", hasattr(Image, "ANTIALIAS"))
              print("NumPy:", numpy.__version__)
              print("imageio:", imageio.__version__)
          except Exception as e:
              print("Version print error:", e)
          subprocess.run(["ffmpeg","-version"], check=False)
          PY

      - name: Print env
        run: |
          echo "SEGMENTS=$SEGMENTS  VIDEOS_LIMIT=$VIDEOS_LIMIT  BURN_IN_CAPTIONS=$BURN_IN_CAPTIONS"
          echo "X264_PRESET=$X264_PRESET  X264_CRF=$X264_CRF"
          echo "Has PEXELS? " $([ -n "$PEXELS_API_KEY" ] && echo YES || echo NO)

      # Fetch script files (txt/md or Google Docs) from Drive into input/scripts/**
      - name: Fetch scripts from Google Drive → input/scripts/**
        env:
          GDRIVE_JSON: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
          INPUT_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_INPUT_FOLDER_ID }}
        run: |
          python - << 'PY'
          import os, io, re, json, shutil, sys
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaIoBaseDownload

          input_root = os.environ.get('INPUT_FOLDER_ID','').strip()
          if not input_root:
              print("❌ GOOGLE_DRIVE_INPUT_FOLDER_ID is empty"); sys.exit(1)
          print(f"🔎 Using INPUT FOLDER ID: {input_root}")

          creds_info = json.loads(os.environ['GDRIVE_JSON'])
          creds = service_account.Credentials.from_service_account_info(
              creds_info, scopes=['https://www.googleapis.com/auth/drive']
          )
          drive = build('drive','v3',credentials=creds)

          shutil.rmtree('input/scripts', ignore_errors=True)

          def list_children(folder_id, mime=None):
              q = f"'{folder_id}' in parents and trashed=false"
              if mime: q += f" and mimeType='{mime}'"
              items, token = [], None
              while True:
                  resp = drive.files().list(
                      q=q, fields="nextPageToken, files(id,name,mimeType)", pageToken=token
                  ).execute()
                  items.extend(resp.get('files', []))
                  token = resp.get('nextPageToken')
                  if not token: break
              return items

          def download_file(file, dest_path):
              os.makedirs(os.path.dirname(dest_path), exist_ok=True)
              mime = file.get('mimeType'); fid = file['id']
              buf = io.BytesIO()
              if mime == 'application/vnd.google-apps.document':
                  req = drive.files().export_media(fileId=fid, mimeType='text/plain')
              else:
                  req = drive.files().get_media(fileId=fid)
              downloader = MediaIoBaseDownload(buf, req)
              done = False
              while not done:
                  status, done = downloader.next_chunk()
              with open(dest_path, 'wb') as f:
                  f.write(buf.getvalue())
              print(f"⬇️  Downloaded: {dest_path}")

          subs = list_children(input_root, mime="application/vnd.google-apps.folder")
          print("📁 Subfolders found:", [s['name'] for s in subs] or "(none)")

          downloaded = 0
          if subs:
              for sf in subs:
                  code = sf['name']  # HM-HI / HT-EN / MJ-BN
                  files = list_children(sf['id'])
                  if not files:
                      print(f"⚠️ Empty folder on Drive: {code}")
                  for f in files:
                      mt = f['mimeType']
                      if mt in ('text/plain','text/markdown','application/vnd.google-apps.document'):
                          base, _ = os.path.splitext(f['name'])
                          local = os.path.join('input','scripts',code, base + '.txt')
                          download_file(f, local)
                          downloaded += 1
                      else:
                          print(f"⏭️  Skipping non-text: {f['name']} ({mt})")
          else:
              files = list_children(input_root)
              print("📄 Files in root:", [f['name'] for f in files])
              for f in files:
                  mt = f['mimeType']
                  if mt in ('text/plain','text/markdown','application/vnd.google-apps.document'):
                      base, _ = os.path.splitext(f['name'])
                      m = re.match(r'^([A-Z]{2}-[A-Z]{2})-', base)
                      code = m.group(1) if m else 'UNCATEGORIZED'
                      local = os.path.join('input','scripts',code, base + '.txt')
                      download_file(f, local)
                      downloaded += 1
                  else:
                      print(f"⏭️  Skipping non-text: {f['name']} ({mt})")

          print(f"✅ Downloaded {downloaded} script file(s).")
          if downloaded == 0:
              print("❌ No scripts downloaded. Check sharing & folder ID and rerun."); sys.exit(1)
          PY

      - name: Show repository tree (after fetch)
        run: |
          find input -maxdepth 3 -type f -print || true

      - name: Render videos
        run: |
          python -c "import sys; print('Python OK:', sys.version)"
          python main.py

      - name: Show media cache
        if: always()
        run: |
          echo "---- input/media_temp ----"
          ls -la input/media_temp || true

      - name: Show outputs
        if: always()
        run: |
          echo "---- output ----"
          find output -maxdepth 3 -type f -print || true

      - name: Upload to Google Drive (Output folder - Shared drive)
        env:
          GDRIVE_JSON: ${{ secrets.GOOGLE_DRIVE_CREDENTIALS }}
          FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
        run: |
          python - << 'PY'
          import os, json, glob
          from google.oauth2 import service_account
          from googleapiclient.discovery import build
          from googleapiclient.http import MediaFileUpload

          creds = service_account.Credentials.from_service_account_info(
              json.loads(os.environ['GDRIVE_JSON']),
              scopes=['https://www.googleapis.com/auth/drive']
          )
          drive = build('drive', 'v3', credentials=creds)

          files = glob.glob('output/final/*.mp4')
          if not files:
              print("No MP4s found in output/final — nothing to upload.")
              raise SystemExit(0)

          folder_id = os.environ['FOLDER_ID'].strip()

          for path in files:
              name = os.path.basename(path)
              meta  = {'name': name, 'parents': [folder_id]}
              media = MediaFileUpload(path, mimetype='video/mp4', resumable=False)
              created = drive.files().create(
                  body=meta,
                  media_body=media,
                  fields='id,name',
                  supportsAllDrives=True
              ).execute()
              print(f"Uploaded {name} -> fileId {created.get('id')}")
          PY

      - name: Keep a copy as workflow artifact (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mp4-outputs
          path: output/final/*.mp4
          if-no-files-found: warn
          retention-days: 7
